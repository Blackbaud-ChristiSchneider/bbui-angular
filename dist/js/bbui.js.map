{
  "version": 3,
  "file": "bbui.js",
  "sources": [
    "src/core.js",
    "src/module.js",
    "src/shellservice.js"
  ],
  "names": [],
  "mappingsrd
  "sourceRoot": "../..",
  "sourcesContent": [
    "/*global angular */\n\n// Declare the one global variable under which all other BBUI components will reside.\n(function () {\n    \"use strict\";\n\n    angular.module('bbui.core', [])\n        .factory('bbui', ['$window', function ($window) {\n            var BBUI,\n                // JSLint chokes on this regular expression if a literal is used.\n                escapeRegExpRegEx = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\\\\\$\\\\^]\", \"g\"),\n                euc = $window.encodeURIComponent,\n                TYPE_STRING = \"string\";\n\n            function emptyFn() {\n            }\n\n            function propOrDefault(obj, name, defaultValue) {\n                var value;\n\n                value = obj[name];\n\n                if (typeof value === \"undefined\") {\n                    return defaultValue;\n                }\n\n                return value;\n            }\n\n            function objEquals(value1, value2, ignoreCase) {\n                if (value1 === value2) {\n                    return true;\n                }\n\n                if (ignoreCase && typeof value1 === TYPE_STRING && typeof value2 === TYPE_STRING) {\n                    return value1.toUpperCase() === value2.toUpperCase();\n                }\n\n                return false;\n            }\n\n            /**\n             * @class BBUI Contains methods for issuing XMLHttpReqests as well as some basic helper functions.\n             * @singleton\n             * @uimodel <span style=\"color: green;\">Yes</span>\n             * @pageaction <span style=\"color: green;\">Yes</span>\n            */\n            BBUI = {\n\n                /**\n                 * Read-only.  Represents an empty GUID value.\n                 * @type {String}\n                 */\n                emptyGuid: \"00000000-0000-0000-0000-000000000000\",\n\n                /**\n                 * Returns a flag indicating the given object is defined and its value is not null.   This function is mainly\n                 * used to see if a JSON property is present, since the absense of a property usually means \"no change\" rather\n                 * than \"this property's value was changed to null.\"<br/><br/>\n                 * Calling this function is equivalent to evaluating <tt>typeof obj !== \"undefined\" && obj !== null</tt>.\n                 * @param {Object} obj The object to check.\n                 * @return {Boolean} False if the object is null or undefined; otherwise, true.\n                 */\n                is: function (obj) {\n                    /// <summary>\n                    /// Returns a flag indicating the given object is defined and its value is not null.   This function is mainly\n                    /// used to see if a JSON property is present, since the absense of a property usually means \"no change\" rather\n                    /// than \"this property's value was changed to null.\"\n                    /// Calling this function is equivalent to evaluating \"typeof obj !== 'undefined' && obj !== null\".\n                    /// </summary>\n                    /// <param name=\"obj\" type=\"Object\">The object to check.</param>\n                    return typeof obj !== \"undefined\" && obj !== null;\n                },\n\n                /**\n                 * Finds an item in an array with the specified property value.\n                 * @param {Array} items The array to search.\n                 * @param {String} propName The property's name.\n                 * @param {Object} value The property's value.\n                 * @param {Boolean} ignorePropCase (optional) Does a case-insensitive search on the property's name.  Default is false.\n                 * @param {Boolean} ignoreValueCase (optional) Does a case-insensitive search on the property's value.  Default is false.\n                 * @return {Object} The first item in the array that matches the property value (or null if no matching item is found).\n                 */\n                findByProp: function (items, propName, value, ignorePropCase, ignoreValueCase) {\n                    /// <summary>Finds an item in an array with the specified property value.</summary>\n                    /// <param name=\"items\" type=\"Array\">The array to search.</param>\n                    /// <param name=\"propName\" type=\"String\">The name of the property.</param>\n                    /// <param name=\"value\" type=\"Object\">The value of the property.</param>\n                    /// <returns type=\"object\">The first item in the array that matches the property value (or null if no matching item is found).</returns>\n\n                    var i,\n                        item,\n                        propValue;\n\n                    if (items) {\n                        i = items.length || 0;\n                        while (i--) {\n                            item = items[i];\n\n                            if (item) {\n                                propValue = BBUI.getPropValue(item, propName, ignorePropCase);\n                                if (objEquals(propValue, value, ignoreValueCase)) {\n                                    return item;\n                                }\n                            }\n                        }\n                    }\n\n                    return null;\n                },\n\n                getPropValue: function (obj, propName, ignoreCase, defaultValue) {\n                    /// <summary>Gets an object's property value using a case-insensitive comparison if specified.</summary>\n                    /// <param name=\"obj\" type=\"Object\">The object containing the property.</param>\n                    /// <param name=\"propName\" type=\"String\">The name of the property.</param>\n                    /// <param name=\"ignoreCase\" type=\"Boolean\">Indicates whether to ignore case on the property value.</param>\n                    /// <param name=\"defaultValue\" type=\"Object\">The default value to return if the property does not exist.</param>\n\n                    var p,\n                        propNameUpper;\n\n                    if (obj && propName) {\n                        if (typeof obj[propName] !== \"undefined\") {\n                            return obj[propName];\n                        }\n\n                        if (ignoreCase) {\n                            propNameUpper = propName.toUpperCase();\n                            for (p in obj) {\n                                /*jslint forin: true */\n                                if (p.toUpperCase() === propNameUpper) {\n                                    return obj[p];\n                                }\n                            }\n                        }\n                    }\n\n                    return defaultValue;\n                },\n\n                clone: function (obj) {\n                    /// <summary>Copies the properties of the specified object to a new object and returns the new object.</summary>\n                    /// <param name=\"obj\" type=\"Object\">Object to clone.</param>\n                    /// <returns type=\"Object\">The cloned object.</return>\n\n                    var cloneObj,\n                        p;\n\n                    if (typeof obj !== \"undefined\") {\n                        if (obj === null) {\n                            return null;\n                        }\n                        cloneObj = {};\n                        for (p in obj) {\n                            if (obj.hasOwnProperty(p)) {\n                                cloneObj[p] = obj[p];\n                            }\n                        }\n                    }\n\n                    return cloneObj;\n                },\n\n                copyProps: function (to, from) {\n                    var p;\n\n                    if (from) {\n                        for (p in from) {\n                            if (from.hasOwnProperty(p)) {\n                                to[p] = from[p];\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * Compares two GUID values by normalizing capitalization of each GUID and comparing them as strings.\n                 * @param {String} guid1 The first GUID to compare.\n                 * @param {String} guid2 The second GUID to compare.\n                 * @param {String} guid1Upper (optional) A flag indicating the first GUID is already upper-cased.  When true, a new upper-cased string is not created for the\n                 * first GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\n                 * have to be created for each iteration of the loop when the GUID does not change between iterations.\n                 * @param {String} guid2Upper (optional) A flag indicating the second GUID is already upper-cased.  When true, a new upper-cased string is not created for the\n                 * second GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\n                 * have to be created for each iteration of the loop when the GUID does not change between iterations.\n                 * @return {Boolean} A flag indicating whether the two GUIDs are the same.\n                 */\n                guidEquals: function (guid1, guid2, guid1Upper, guid2Upper) {\n                    /// <summary>Compares two GUID values by normalizing capitalization of each GUID and comparing them as strings.</summary>\n                    /// <param name=\"guid1\" type=\"String\">The first GUID to compare.</param>\n                    /// <param name=\"guid2\" type=\"String\">The second GUID to compare.</param>\n                    /// <param name=\"guid1Upper\" type=\"Boolean\" optional=\"true\">\n                    /// A flag indicating the first GUID is already upper-cased.  When true, a new upper-cased string is not created for the\n                    /// first GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\n                    /// have to be created for each iteration of the loop when the GUID does not change between iterations.\n                    /// </param>\n                    /// <param name=\"guid2Upper\" type=\"Boolean\" optional=\"true\">\n                    /// A flag indicating the second GUID is already upper-cased.  When true, a new upper-cased string is not created for the\n                    /// second GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\n                    /// have to be created for each iteration of the loop when the GUID does not change between iterations.\n                    /// </param>\n                    /// <returns type=\"Boolean\">A flag indicating whether the two GUIDs are the same.</returns>\n\n                    if (typeof guid1 !== TYPE_STRING || typeof guid2 !== TYPE_STRING) {\n                        return false;\n                    }\n\n                    if (!guid1Upper) {\n                        guid1 = guid1.toUpperCase();\n                    }\n\n                    if (!guid2Upper) {\n                        guid2 = guid2.toUpperCase();\n                    }\n\n                    return guid1 === guid2;\n                },\n\n                getObjByName: function (objName) {\n                    /// <summary>Parses the provided object name and returns a reference to the object it represents.</summary>\n                    /// <param name=\"objName\" type=\"String\">The name of the object.</param>\n                    /// <returns type=\"Object\">The corresponding object, or null if any part of the object is undefined.</returns>\n\n                    var i,\n                        n,\n                        obj,\n                        parts,\n                        part;\n\n                    // Split the object name on the period, then loop through the parts, building up a reference to the\n                    // object.  This essentially turns a string like \"BBUI.globals.myFunctionName\" into the object \n                    // window[\"BBUI\"][\"globals\"][\"myFunctionName\"].\n                    parts = objName.split(\".\");\n\n                    // Start with the window object.\n                    obj = $window;\n\n                    for (i = 0, n = parts.length; i < n; i++) {\n                        part = parts[i];\n                        if (!(i === 0 && part === \"window\")) {\n                            obj = obj[part];\n                            if (typeof obj === \"undefined\" && i < n - 1) {\n                                return null;\n                            }\n                        }\n                    }\n\n                    return obj;\n                },\n\n                /**\n                 * Creates a \"namespace\" using the provided string and returns the object representing the namespace.\n                 * An example where a custom page action is created under the BBUI.customactions namespace:\n                 * <pre><code>\n        var ns;\n\n        // Ensure the webshelltest namespace exists.\n        ns = BBUI.ns(\"BBUI.customactions.webshelltest\");\n\n        ns.MyCustomAction = function (host) {\n            // Cache the host object so it can be referenced later.\n            this.host = host;\n        };\n\n        ns.MyCustomAction.prototype = {\n\n            executeAction: function (callback) {\n                // Action logic goes here.\n            }\n\n        };\n\n                /**\n                 * Concatenates all the provided arguments as if they were portions of a URL, inserting forward slashes where appropriate.\n                 * @param {String} arg1 A portion of the URL.\n                 * @param {String} arg2 (optional)\n                 * @param {String} etc (optional)\n                 * @return {String} The concatenated URL.\n                 */\n                urlConcat: function (arg1) {\n                    /// <summary>\n                    /// Concatenates all the provided arguments as if they were portions of a URL, inserting forward slashes \n                    /// where appropriate.\n                    /// </summary>\n                    /// <returns type=\"String\">The concatenated URL.</returns>\n\n                    var arg,\n                        argCount,\n                        argObj,\n                        i,\n                        url;\n\n                    argCount = arguments.length;\n\n                    if (argCount) {\n                        if (!BBUI.is(arg1)) {\n                            return null;\n                        }\n\n                        url = arg1.toString();\n\n                        for (i = 1; i < argCount; i++) {\n                            argObj = arguments[i];\n\n                            if (!BBUI.is(argObj)) {\n                                return null;\n                            }\n\n                            arg = argObj.toString();\n\n                            if (url.charAt(url.length - 1) !== \"/\" && arg.charAt(0) !== \"/\") {\n                                url += \"/\";\n                            }\n\n                            url += arg;\n                        }\n\n                        return url;\n                    }\n\n                    return null;\n                },\n\n                argsToArray: function (args, start) {\n                    /// <summary>\n                    /// Takes the special arguments object from a function and returns the arguments in a true array.\n                    /// </summary>\n                    /// <param name=\"args\">The arguments object.</param>\n                    /// <param name=\"start\" type=\"Integer\" optional=\"true\">\n                    /// The index of the first item to return.  When not specified, all the items are returned.\n                    /// </param>\n                    /// <returns type=\"Array\">The array of arguments.</returns>\n                    return Array.prototype.slice.call(args, start || 0);\n                },\n\n                arrayToQueryString: function (items, itemPrefix, prependAmpersand) {\n                    /// <summary>\n                    /// Takes an array of objects with an \"id\" or \"name\" property and a \"value\" property and returns\n                    /// the items as a query string.\n                    /// <summary>\n                    /// <param name=\"items\" type=\"Array\">The array of objects.</param>\n                    /// <param name=\"itemPrefix\" type=\"String\" use=\"optional\">\n                    /// The string to prepend to the query string item name.\n                    /// </param>\n                    /// <param name=\"prependAmpersand\" type=\"Boolean\" use=\"optional\">\n                    /// Flag indicating whether to prepend an ampersand to the returned query string.\n                    /// </param>\n                    /// <returns type=\"String\">The query string.</returns>\n                    var i,\n                        item,\n                        n,\n                        s;\n\n                    s = \"\";\n\n                    if (items && items.length) {\n                        itemPrefix = itemPrefix || \"\";\n\n                        for (i = 0, n = items.length; i < n; i++) {\n                            item = items[i];\n\n                            if (i > 0 || prependAmpersand) {\n                                s += \"&\";\n                            }\n\n                            s += itemPrefix + euc(item.id || item.name) + \"=\" + euc(item.value);\n                        }\n                    }\n\n                    return s;\n                },\n\n                getAbsoluteBaseUrl: function (relativeBaseUrl) {\n                    var baseUrl,\n                        i,\n                        serverPartsCount;\n\n                    if (!relativeBaseUrl) {\n                        return relativeBaseUrl;\n                    }\n\n                    serverPartsCount = relativeBaseUrl.split(\"/\").length;\n\n                    // NOTE: The base URL value used to be passed as a relative URL down from the server, but this caused problems\n                    // with mixed content warnings in IE8 when a URL on a DOM element (such as an href attribute on a LINK element\n                    // or a background-image CSS rule on a DIV element) was specified and then created and not added to the page or \n                    // removed from the page and then garbage collected.  This is due to a bug in IE8 where the protocol of \"about:\"\n                    // is assumed rather than the protocol specified on the current web page.  Changing the base URL to an absolute\n                    // URL by removing a known part of the URL here fixes this issue.  More information on the bug in IE that causes\n                    // the mixed content warning can be found here: \n                    // http://support.microsoft.com/kb/925014\n                    // http://www.pelagodesign.com/blog/2007/10/30/ie7-removechild-and-ssl/\n                    // http://blog.httpwatch.com/2009/09/17/even-more-problems-with-the-ie-8-mixed-content-warning/#comment-10632\n                    // http://blogs.msdn.com/b/ieinternals/archive/2009/06/22/https-mixed-content-in-ie8.aspx?PageIndex=3#comments\n\n                    // Also, a utility called \"Scriptfree\" was instrumental in tracking this bug down.  This was mentioned in a \n                    // comment on the IEInternals blog post above.\n                    // http://www.enhanceie.com/dl/scriptfreesetup.exe\n\n                    // Remove the query string since it's not relevant.\n                    baseUrl = $window.location.href.split(\"?\")[0];\n\n                    for (i = 0; i < serverPartsCount + 1; i++) {\n                        baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf(\"/\"));\n                    }\n\n                    return baseUrl;\n                },\n\n                /**\n                 * Detemines whether the value of the first parameter ends with the value of the second parameter.\n                 * @param {String} s The value to search.\n                 * @param {String} val The value to find.\n                 * @return {Boolean} A flag indicating whether the value of the first parameter ends with the value of the second parameter.\n                 */\n                endsWith: function (s, val) {\n                    var pos;\n\n                    if (typeof s === TYPE_STRING && typeof val === TYPE_STRING) {\n                        pos = s.length - val.length;\n                        return pos >= 0 && s.lastIndexOf(val) === pos;\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Overrides functions on the first argument with properties from the second argument and returns an object\n                 * with the original base functions.\n                 * @param {Object} to The object whose functions are to be overridden.\n                 * @param {Object} from The Object containing the override functions.\n                 * @return {Object} The object containing the original functions.\n                 */\n                override: function (to, from) {\n                    var base,\n                        overridden,\n                        p;\n\n                    base = {};\n\n                    for (p in from) {\n                        if (from.hasOwnProperty(p)) {\n                            overridden = to[p];\n\n                            if (overridden) {\n                                base[p] = overridden;\n                            }\n\n                            to[p] = from[p];\n                        }\n                    }\n\n                    return base;\n                },\n\n                escapeRegExp: function (filter) {\n                    if (typeof filter === TYPE_STRING) {\n                        return filter.replace(escapeRegExpRegEx, '\\\\$&');\n                    }\n\n                    return null;\n                }\n\n            };\n            \n            return BBUI;\n\n        }]);\n        \n}());\n",
    "/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('bbui', ['bbui.core', 'bbui.shellservice']);\n    \n}());",
    "/*global angular, BBUI */\n\n(function () {\n    'use strict';\n    \n    var Service;\n\n    (function () {\n        // Shorter alias for commonly-used function.\n        var euc = encodeURIComponent,\n            paramPrefix = \"p_\";\n\n        function pushIf(sb, qsVarName, value, condition) {\n            if (typeof condition === \"undefined\") {\n                condition = !!value;\n            }\n\n            if (condition) {\n                sb.push(\"&\" + qsVarName + \"=\");\n                sb.push(euc(value));\n            }\n        }\n\n        function buildBaseUrl(svc, fileName, action, pageId, tabId, sectionId, actionId, contextRecordId) {\n            var sb;\n\n            sb = [];\n\n            if (svc.proxyUrl) {\n                sb.push(svc.proxyUrl +\n                    (svc.proxyUrl.indexOf(\"?\") >= 0 ? \"&\" : \"?\") +\n                    \"fileName=\" +\n                    euc(fileName) +\n                    \"&\");\n            } else {\n                sb.push(BBUI.urlConcat(svc.baseUrl, \"webui/\" + fileName + \"?\"));\n            }\n\n            sb.push(\"databaseName=\" + euc(svc.databaseName));\n\n            pushIf(sb, \"runAs\", svc.runAs);\n\n            pushIf(sb, \"action\", action);\n            pushIf(sb, \"pageId\", pageId);\n            pushIf(sb, \"tabId\", tabId);\n            pushIf(sb, \"sectionId\", sectionId);\n            pushIf(sb, \"actionId\", actionId);\n            pushIf(sb, \"contextRecordId\", contextRecordId);\n\n            return sb.join(\"\");\n        }\n\n        function buildSvcBaseUrl(svc, action, pageId, tabId, sectionId, actionId, contextRecordId) {\n            return buildBaseUrl(svc, \"WebShellService.ashx\", action, pageId, tabId, sectionId, actionId, contextRecordId);\n        }\n\n        function buildAdHocQuerySvcBaseUrl(svc) {\n            return buildBaseUrl(svc, \"WebShellAdHocQueryService.ashx\");\n        }\n\n        function buildDataListSvcBaseUrl(svc, dataListId, pageId, tabId, sectionId) {\n            var url;\n\n            url = buildBaseUrl(svc, \"WebShellDataListService.ashx\", null, pageId, tabId, sectionId) +\n                \"&dataListId=\" +\n                euc(dataListId);\n\n            return url;\n        }\n\n        function buildSearchListSvcBaseUrl(svc, searchListId, criteria) {\n            return buildBaseUrl(svc, \"WebShellSearchListService.ashx\") +\n                \"&searchListId=\" +\n                euc(searchListId) +\n                \"&criteria=\" +\n                euc(criteria);\n        }\n\n        function addSecurityContext(url, options) {\n            if (options) {\n                if (options.securityContextFeatureId) {\n                    url += \"&securityContextFeatureId=\" + euc(options.securityContextFeatureId);\n                }\n\n                if (BBUI.is(options.securityContextFeatureType)) {\n                    url += \"&securityContextFeatureType=\" + euc(options.securityContextFeatureType);\n                }\n            }\n\n            return url;\n        }\n\n        function getHeaders(svc) {\n            var headers;\n\n            headers = {};\n\n            BBUI.copyProps(headers, BBUI.webshell.Service.globalHttpHeaders);\n            BBUI.copyProps(headers, svc.httpHeaders);\n\n            return headers;\n        }\n\n        function doRequest(svc, method, url, data, options) {\n            var postOptions,\n                session;\n\n            return svc.$http({\n                method: method,\n                url: url,\n                data: data,\n                headers: getHeaders(svc),\n                cache: false\n            });\n        }\n\n        function doGet(svc, url, options) {\n            return svc.doGet(url, options);\n        }\n\n        function doPost(svc, url, data, options) {\n            return svc.doPost(url, data, options);\n        }\n\n        /**\n         * @class BBUI.webshell.Service\n         * Provides various methods for communicating with the web shell endpoints on the web server.\n         * <br/><br/>Note that all methods that make a call to the web server have the same last three arguments:\n         * <div class=\"mdetail-params\">\n         * <ul>\n         * <li><tt>successCallback</tt> : Function <div class=\"sub-desc\">The function to be called when request completes successfully.\n         * The <tt>reply</tt> object will be passed as the first parameter to the function.</div></li>\n         * <li><tt>failureCallback</tt> : Function <div class=\"sub-desc\">The function to be called when an error occurs during the request.\n         * The original XMLHttpRequest object will be passed as the first parameter to the function, and the error message will be passed\n         * as the second parameter.</div></li>\n         * <li><tt>options</tt> : Object <div class=\"sub-desc\">The following properties apply to all requests.\n         * Each method may implement its own properties which are documented on the method itself.</div></li>\n         * <ul>\n         * <li><tt>scope</tt> : Object <div class=\"sub-desc\">The scope (<tt>this</tt>) to use for the callback functions.</div></li>\n         * <li><tt>state</tt> : Object <div class=\"sub-desc\">An extra parameter to be passed to the success/failure callback functions\n         * which can be used instead of <tt>scope</tt>. This will be the second parameter passed to the successCallback function or the\n         * third parameter passed to the failureCallback function.</div></li>\n         * </ul>\n         * </ul>\n         * </div>\n         * An example performing a record operation a custom page action that illustrates how the success/failure callbacks work:\n         * <pre><code>\n    (function () {\n        // Ensure the webshelltest namespace exists.\n        var ns = BBUI.ns(\"BBUI.customactions.webshelltest\"),\n            Util = BBUI.forms.Utility;\n\n        ns.MyCustomAction = function (host) {\n            // Cache the host object so it can be referenced later.\n            this.host = host;\n        };\n\n        ns.MyCustomAction.prototype = {\n\n            executeAction: function (callback) {\n                var host,\n                    recordOperationId,\n                    webShellSvc;\n\n                host = this.host;\n                webShellSvc = host.webShellSvc;\n                recordOperationId = \"183bf26e-ba1c-4c02-aa43-f0a806f6fe4d\";\n\n                // Callback for when the record operation is performed successfully.\n                function performSuccess() {\n                    // The record operation is complete.  Call the callback.\n                    callback();\n                }\n\n                // Callback for when the record operation fails.\n                function performFailure(request, error) {\n                    Util.alert(error.message);\n                }\n\n                // Callback for when getting the prompt succeeds.\n                function promptSuccess(reply) {\n\n                    // Util.confirm() is an asynchronous operation, so create a callback for when the user answers the prompt.\n                    function confirmCallback(result) {\n                        if (result === 1) { // Yes\n                            // The user confirmed the prompt; perform the record operation.\n                            webShellSvc.recordOperationPerform(recordOperationId,\n                                host.getFieldValue(\"RECORDID\"),\n                                performSuccess,\n                                performFailure);\n                        }\n                    }\n\n                    Util.confirm(reply.promptText, {\n                        buttonStyle: 2, // Yes/No\n                        callback: confirmCallback\n                    });\n                }\n\n                // Callback for when getting the prompt fails.\n                function promptFailure(request, error) {\n                    Util.alert(error.message);\n                }\n\n                // Get the prompt.\n                webShellSvc.recordOperationGetPrompt(recordOperationId, promptSuccess, promptFailure);\n            }\n\n        };\n\n    })();\n         * </code></pre>\n         * @uimodel <span style=\"color: red;\">No</span>\n         * @pageaction <span style=\"color: green;\">Yes</span>\n         */\n        Service = function (baseUrl, databaseName, options) {\n            /// <summary>The main AJAX interface between web shell pages and the web server.</summary>\n            /// <param name=\"baseUrl\" type=\"String\">The base URL to the web server.</param>\n            /// <param name=\"databaseName\" type=\"String\">The name of the database to which to connect.</param>\n            /// <param name=\"options\" type=\"Object\" optional=\"true\">\n            /// An object containing any of the following properties:\n            /// proxyUrl: A URL to a web server that acts as a proxy between the client and the AppFx web server.\n            /// This is useful in cases where the host page is hosted on a server other than the AppFx web server\n            /// and the browser would otherwise block the request for being a cross-site request.\n            /// </param>\n            /// <field name=\"baseUrl\" type=\"String\">The base URL to the web server.</field>\n            /// <field name=\"databaseName\" type=\"String\">The name of the database to which to connect.</field>\n\n            var svc;\n\n            svc = this;\n\n            svc.baseUrl = baseUrl;\n            svc.databaseName = databaseName;\n\n            if (options) {\n                svc.runAs = options.runAs;\n                svc.onRequestBegin = options.onRequestBegin;\n                svc.onRequestEnd = options.onRequestEnd;\n                svc.httpHeaders = options.httpHeaders;\n                svc.proxyUrl = options.proxyUrl;\n            }\n        };\n\n        Service.prototype = {\n\n            /**\n             * Read-only.  The base URL to the web server.\n             * @property baseUrl\n             * @type String\n             */\n            baseUrl: null,\n\n            /**\n             * Read-only.  The name of the database to which to connect.\n             * @property databaseName\n             * @type String\n             */\n            databaseName: null,\n\n            /**\n             * @private\n             * Validates a user name and password for a given user.\n             * @param {Object} loginInfo An object with username and password properties.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            login: function (loginInfo, options) {\n                var url;\n\n                url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=login\";\n\n                return doPost(this, url, loginInfo, options);\n            },\n\n            /**\n             * @private\n             * Removes the session cookie that keeps the user logged in.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            logout: function (options) {\n                var url;\n\n                url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=logout\";\n\n                return doPost(this, url, null, options);\n            },\n\n            /**\n             * @private\n             * Requests a password reset link and emails it to the associated user.\n             * @param {Object} emailAddress The user's email address.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            sendPasswordResetLink: function (emailAddress, options) {\n                var url;\n\n                url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=sendPasswordResetLink&emailAddress=\" + emailAddress;\n\n                return doPost(this, url, null, options);\n            },\n\n            /**\n             * @private\n             * Resets the user's password.\n             * @param {Object} request An object containing token and newPassword properties.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            resetPassword: function (request, options) {\n                var url;\n\n                url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=resetPassword\";\n\n                return doPost(this, url, request, options);\n            },\n\n            /**\n             * @private\n             * Starts the user's session and returns navigation information for web shell.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            sessionStart: function (options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"sessionStart\");\n\n                return doPost(this, url, null, options);\n            },\n\n            /**\n             * @private\n             * Gets the site-wide navigation information for web shell.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            getNavigation: function (options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getNavigation\");\n\n                if (options.refreshCache) {\n                    url += \"&refreshCache=true\";\n                }\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * @private\n             * Gets the specified page's metadata.\n             * @param {String} pageId The ID of the page.\n             * @param {String} recordId (optional) The ID of the record to be shown by the page.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>firstTab</tt> : Indicates that the first visible tab's full metadata should be returned.  Only the caption for other tabs will be returned.</li>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * <li><tt>tabId</tt> : The ID of the tab whose full metadata should be returned.  Only the caption for other tabs will be returned.</li>\n             * </ul>\n             */\n            getPage: function (pageId, recordId, options) {\n                var url;\n\n                options = options || {};\n\n                url = buildSvcBaseUrl(this, \"getPage\", pageId, options.tabId, null, null, recordId);\n\n                if (options.firstTab) {\n                    url += \"&firstTab=true\";\n                }\n                if (options.listBuilderInstanceId) {\n                    url += \"&listBuilderInstanceId=\" + euc(options.listBuilderInstanceId);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            /**\n            * @private\n            * Gets the specified page's metadata.\n            * @param {String} pageId The ID of the page.\n            * @param {String} recordId (optional) The ID of the record to be shown by the page.\n            * @param {Object} options (optional) An object that my contain any of the following properties:\n            * <ul>\n            * <li><tt>firstTab</tt> : Indicates that the first visible tab's full metadata should be returned.  Only the caption for other tabs will be returned.</li>\n            * <li><tt>scope</tt> : See class description for more information.</li>\n            * <li><tt>tabId</tt> : The ID of the tab whose full metadata should be returned.  Only the caption for other tabs will be returned.</li>\n            * </ul>\n            */\n            getPageIsCustomizable: function (pageId, options) {\n                var url;\n\n                options = options || {};\n\n                url = buildSvcBaseUrl(this, \"getPageIsCustomizable\", pageId);\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * @private\n             * Gets the specified page tab's metadata.\n             * @param {String} pageId The ID of the page.\n             * @param {String} tabId The ID of the tab.\n             * @param {String} recordId The ID of the record to be shown by the page.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            getPageTab: function (pageId, tabId, recordId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageTab\", pageId, tabId, null, null, recordId);\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * @private\n             * Builds a page on the server according to the specified report and returns that page's metadata.\n             * @param {String} reportId The ID of the report.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            getReportPage: function (reportId, options) {\n                var url;\n\n                options = options || {};\n\n                url = buildSvcBaseUrl(this, \"getReportPage\") +\n                    \"&reportId=\" + euc(reportId);\n\n                if (options.historyId) {\n                    url += \"&historyId=\" + euc(options.historyId);\n                }\n\n                if (options.caption) {\n                    url += \"&caption=\" + euc(options.caption);\n                }\n\n                if (options.displayPromptArea) {\n                    url += \"&displayPromptArea=\" + euc(options.displayPromptArea);\n                }\n\n                url += BBUI.arrayToQueryString(options.parameters, paramPrefix, true);\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * @private\n             * Gets the action metadata for a functional area's task.\n             * @taskId {String} The ID of the functional area's task.\n             * @functionalAreaId {String} The ID of the functional area.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            getFunctionalAreaTaskAction: function (functionalAreaId, taskId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getFunctionalAreaTaskAction\");\n\n                if (functionalAreaId) {\n                    url += \"&functionalAreaId=\" + euc(functionalAreaId);\n                }\n\n                if (taskId) {\n                    url += \"&taskId=\" + euc(taskId);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            /**\n            * @private\n            * Returns a task as the variable reply for the callback\n            * @taskId {String} The ID of the task\n            * @param {Function} successCallback (optional) See class description for more information.\n            * @param {Function} failureCallback (optional) See class description for more information.\n            */\n            getTaskAction: function (taskId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getTaskAction\");\n\n                if (taskId) {\n                    url += \"&taskId=\" + euc(taskId);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * @private\n             * Gets the metadata for a page-level action.\n             * @pageId {String} The ID of the page.\n             * @actionId {String} The ID of the page's action.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            getPageAction: function (pageId, actionId, contextRecordId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageAction\", pageId, null, null, actionId, contextRecordId);\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * @private\n             * Gets the metadata for a page section.\n             * @pageId {String} The ID of the page.\n             * @tabId {String} The ID of the tab to which the section belongs.\n             * @sectionId {String} The ID of the section.\n             * @contextRecordId {String} (optional) The ID of the page's context record.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            getPageSection: function (pageId, tabId, sectionId, contextRecordId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageSection\", pageId, tabId, sectionId, null, contextRecordId);\n\n                return doGet(this, url, options);\n            },\n\n            getPageDataFormSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, formSessionId, modelInstanceId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageDataFormSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId) +\n                    \"&formSessionId=\" +\n                    euc(formSessionId) +\n                    \"&modelInstanceId=\" +\n                    euc(modelInstanceId);\n\n                return doPost(this, url, null, options);\n            },\n\n            getPageReportSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\n                var reportValues,\n                    url;\n\n                if (options) {\n                    reportValues = options.reportValues;\n                }\n\n                url = buildSvcBaseUrl(this, \"getPageReportSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                return doPost(this, url, reportValues, options);\n            },\n\n\n            getPageUIWidgetSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\n                var row = null,\n                    url;\n\n                url = buildSvcBaseUrl(this, \"getPageUIWidgetSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                if (options) {\n                    if (options.pageRecordId) {\n                        url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                    }\n\n                    if (options.rowValues) {\n                        row = options.rowValues;\n                    }\n                }\n\n                return doPost(this, url, row, options);\n            },\n\n            getPageUrlSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageUrlSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                if (options) {\n                    if (options.pageRecordId) {\n                        url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                    }\n                }\n\n                return doPost(this, url, null, options);\n            },\n\n            getPageDataListSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, row, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageDataListSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                if (options) {\n                    if (options.pageRecordId) {\n                        url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                    }\n                    if (options.formSessionId) {\n                        url += \"&formSessionId=\" + euc(options.formSessionId);\n                    }\n                    if (options.modelInstanceId) {\n                        url += \"&modelInstanceId=\" + euc(options.modelInstanceId);\n                    }\n                }\n\n                return doPost(this, url, row, options);\n            },\n\n            getPageListBuilderSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, row, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageListBuilderSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                if (options && options.pageRecordId) {\n                    url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                }\n\n                return doPost(this, url, row, options);\n            },\n\n            getListBuilderAvailableColumns: function (queryViewId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getListBuilderAvailableColumns\") + \"&queryViewId=\" + queryViewId;\n\n                return doGet(this, url, options);\n            },\n\n            listBuilderGetInstanceXml: function (queryViewId, request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"listBuilderGetInstanceXml\") + \n                    \"&queryViewId=\" + \n                    euc(queryViewId);\n\n                if (options.parameterFormSessionId) {\n                    url += \"&parameterFormSessionId=\" + euc(options.parameterFormSessionId);\n                }\n\n                return doPost(this, url, request, options);\n            },\n\n            listBuilderGetInstance: function (listBuilderInstanceId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"listBuilderGetInstance\") + \"&listBuilderInstanceId=\" + listBuilderInstanceId;\n\n                return doGet(this, url, options);\n            },\n\n            listBuilderClearAllSettings: function (userSettingsPath, queryViewId, options) {\n\n                var url;\n\n                url = buildSvcBaseUrl(this, \"listBuilderClearAllSettings\") + \n                    \"&userSettingsPath=\" + userSettingsPath +\n                    \"&queryViewId=\" + queryViewId;\n\n                return doGet(this, url, options);\n            },\n\n            adHocQueryClearAllSettings: function (userSettingsPath, adHocQueryId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"adHocQueryClearAllSettings\") +\n                    \"&userSettingsPath=\" + userSettingsPath +\n                    \"&adHocQueryId=\" + adHocQueryId;\n\n                return doGet(this, url, options);\n            },\n\n            getAdHocQueryAvailableColumns: function (adHocQueryId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getAdHocQueryAvailableColumns\") + \"&adHocQueryId=\" + adHocQueryId;\n\n                return doGet(this, url, options);\n            },\n\n            getPageSummarySectionAction: function (pageId, actionId, contextRecordId, formSessionId, modelInstanceId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageSummarySectionAction\", pageId, null, null, actionId, contextRecordId) +\n                    \"&formSessionId=\" +\n                    euc(formSessionId) +\n                    \"&modelInstanceId=\" +\n                    euc(modelInstanceId);\n\n                return doGet(this, url, options);\n            },\n\n            evaluateDataListSectionActions: function (pageId, tabId, sectionId, contextRecordId, row, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"evaluateDataListSectionActions\", pageId, tabId, sectionId, null, contextRecordId);\n\n                if (options) {\n                    if (options.pageRecordId) {\n                        url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                    }\n                }\n\n                return doPost(this, url, row, options);\n            },\n\n            evaluateListBuilderSectionActions: function (pageId, tabId, sectionId, contextRecordId, row, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"evaluateListBuilderSectionActions\", pageId, tabId, sectionId, null, contextRecordId);\n\n                if (options && options.pageRecordId) {\n                    url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                }\n\n                return doPost(this, url, row, options);\n            },\n\n            evaluateDataFormSectionActions: function (pageId, tabId, sectionId, contextRecordId, formSessionId, modelInstanceId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"evaluateDataFormSectionActions\", pageId, tabId, sectionId, null, contextRecordId) +\n                    \"&formSessionId=\" +\n                    euc(formSessionId) +\n                    \"&modelInstanceId=\" +\n                    euc(modelInstanceId);\n\n                return doPost(this, url, null, options);\n            },\n\n            dataListGetOutputDefinition: function (dataListId, options) {\n                var url;\n\n                options = options || {};\n                options.cache = true;\n\n                url = BBUI.urlConcat(this.baseUrl, \"webui/mc/\") + euc(this.databaseName) + \"/d/\" + euc(dataListId) + \".\" + (options.timestamp || 0) + \"_bbmd.ashx\";\n\n                return doGet(this, url, options);\n            },\n\n            queryViewGetOutputDefinition: function (queryViewId, options) {\n                var url;\n\n                options = options || {};\n                options.cache = true;\n\n                url = BBUI.urlConcat(this.baseUrl, \"webui/mc/\") + euc(this.databaseName) + \"/q/\" + euc(queryViewId) + \".\" + (options.timestamp || 0) + \"_bbmd.ashx\";\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * Loads the results of the specified data list and passes the {@link BBUI.webshell.servicecontracts.DataListLoadReply reply object}\n             * to the successCallback function.\n             * @param {String} dataListId The ID of the data list to load.\n             * @param {String} contextRecordId (optional) The ID of the data list's context record.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>pageRecordId</tt> : The ID of the page's context record where the data list is rendered.</li>\n             * <li><tt>parameterFormSessionId</tt> : The ID of the form session that provides parameters to the data list.</li>\n             * <li><tt>parameters</tt> : An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to filter the data list results.</li>\n             * <li><tt>returnFlotData</tt> : A flag indicating the data should be returned in a format readable by flot charts.</li>\n             * <li><tt>returnFormattedValues</tt> : Flag indicating the data list should return formatted values along with the raw values.</li>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * <li><tt>userSettingsPath</tt> : The path used as the key to store user information about the data list, such as column sizes or the last filter values used.</li>\n             * </ul>\n             */\n            dataListLoad: function (dataListId, contextRecordId, options) {\n                var sb,\n                    url;\n\n                options = options || {};\n\n                sb = [buildDataListSvcBaseUrl(this, dataListId)];\n\n                pushIf(sb, \"recordId\", contextRecordId);\n\n                if (options) {\n                    pushIf(sb, \"returnFormattedValues\", \"true\", !!options.returnFormattedValues);\n                    pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                    pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                    pushIf(sb, \"functionalAreaId\", options.functionalAreaId);\n                    pushIf(sb, \"uiWidgetId\", options.uiWidgetId);\n                    pushIf(sb, \"personalizationMode\", options.personalizationMode);\n                    pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                    pushIf(sb, \"returnFlotData\", \"true\", !!options.returnFlotData);\n                    pushIf(sb, \"pageId\", options.pageId);\n                    pushIf(sb, \"tabId\", options.tabId);\n                    pushIf(sb, \"sectionId\", options.sectionId);\n                    pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\n                    pushIf(sb, \"discardRows\", \"true\", !!options.discardRows);\n                    pushIf(sb, \"returnPageNavigationTree\", \"true\", !!options.returnPageNavigationTree);\n                    pushIf(sb, \"limit\", options.limit);\n                    pushIf(sb, \"cancelId\", options.cancelId);\n\n                    sb.push(BBUI.arrayToQueryString(options.parameters, paramPrefix, true));\n                }\n\n                url = sb.join(\"\");\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * Loads the results of the specified simple data list and passes the {@link BBUI.webshell.servicecontracts.SimpleDataListLoadReply reply object}\n             * to the successCallback function.\n             * @param {String} simpleDataListId The ID of the simple data list to load.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>parameters</tt> : An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to filter the simple data list results.</li>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            simpleDataListLoad: function (simpleDataListId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"simpleDataListLoad\") +\n                    \"&simpleDataListId=\" + euc(simpleDataListId);\n\n                if (options) {\n                    url += BBUI.arrayToQueryString(options.parameters, paramPrefix, true);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            buildPageSectionDataListResultsUrl: function (pageId, tabId, sectionId, dataListId, options) {\n                var sb,\n                    url;\n\n                if (!options) {\n                    options = {};\n                }\n\n                sb = [buildDataListSvcBaseUrl(this, dataListId, pageId, tabId, sectionId)];\n\n                pushIf(sb, \"recordId\", options.contextRecordId);\n                pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\n                // Adding moreRowsRangeKey back here\n                // Since buildResultsUrl is always called now to set the proxy connection url, we should always be getting the correct value\n                pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\n                pushIf(sb, \"previousRowCount\", options.previousRowCount);\n                pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                pushIf(sb, \"personalizationMode\", options.personalizationMode);\n                pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                pushIf(sb, \"exportFormat\", options.exportFormat);\n                pushIf(sb, \"cancelId\", options.cancelId);\n\n                sb.push(BBUI.arrayToQueryString(options.parameters, paramPrefix, true));\n\n                url = sb.join(\"\");\n\n                return url;\n            },\n\n            buildPageSectionAdHocQueryListResultsUrl: function (pageId, tabId, sectionId, adHocQueryId, queryViewId, options) {\n                var sb,\n                    svc = this,\n                    url;\n\n                sb = [buildBaseUrl(svc, \"WebShellAdHocQueryListService.ashx\") +\n                    \"&adHocQueryId=\" + euc(adHocQueryId) +\n                    \"&queryViewId=\" + euc(queryViewId) +\n                    \"&returnResults=true\"];\n\n                options = options || {};\n\n                pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\n                pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                pushIf(sb, \"pageId\", pageId);\n                pushIf(sb, \"tabId\", tabId);\n                pushIf(sb, \"sectionId\", sectionId);\n                pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                pushIf(sb, \"recordId\", options.contextRecordId);\n                pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                pushIf(sb, \"saveUserSettings\", \"true\", !!options.saveUserSettings);\n                pushIf(sb, \"cancelId\", options.cancelId);\n\n                url = sb.join(\"\");\n\n                return url;\n            },\n\n            buildPageSectionListBuilderResultsUrl: function (pageId, tabId, sectionId, queryViewId, options) {\n                var sb,\n                    svc = this,\n                    url;\n\n                sb = [buildBaseUrl(svc, \"WebShellListBuilderService.ashx\") +\n                    \"&queryViewId=\" + euc(queryViewId) +\n                    \"&returnResults=true\"];\n\n                options = options || {};\n\n                pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\n                pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                pushIf(sb, \"pageId\", pageId);\n                pushIf(sb, \"tabId\", tabId);\n                pushIf(sb, \"sectionId\", sectionId);\n                pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                pushIf(sb, \"recordId\", options.contextRecordId);\n                pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                pushIf(sb, \"saveUserSettings\", \"true\", !!options.saveUserSettings);\n                pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\n                pushIf(sb, \"previousRowCount\", options.previousRowCount);\n                pushIf(sb, \"cancelId\", options.cancelId);\n                pushIf(sb, \"storeSettingsByContextRecordId\", options.storeSettingsByContextRecordId);\n\n                url = sb.join(\"\");\n\n                return url;\n            },\n\n            listBuilderClearCachedResults: function (moreRowsRangeKey, options) {\n                var url,\n                    svc = this;\n\n                url = buildBaseUrl(svc, \"WebShellListBuilderService.ashx\") +\n                    \"&moreRowsRangeKey=\" + euc(moreRowsRangeKey) +\n                    \"&discardRows=true\";\n\n                return doGet(svc, url, options);\n            },\n\n            pageSectionDataListLoad: function (pageId, tabId, sectionId, dataListId, options) {\n                var url;\n\n                url = this.buildPageSectionDataListResultsUrl(pageId, tabId, sectionId, dataListId, options);\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * Gets the prompt to be displayed before the specified record operation is performed and passes the\n             * {@link BBUI.webshell.servicecontracts.RecordOperationPrompt reply object} to the successCallback function.\n             * @param {String} recordOperationId The ID of the record operation.\n             * @param {String} recordId (optional) The ID of the context record for the record operation.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            recordOperationGetPrompt: function (recordOperationId, recordId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"recordOperationGetPrompt\") +\n                    \"&recordOperationId=\" +\n                    euc(recordOperationId);\n\n                if (recordId) {\n                    url += \"&recordId=\" + euc(recordId);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * Performs a record operation.\n             * @param {String} recordOperationId The ID of the record operation.\n             * @param {String} recordId (optional) The ID of the context record for the record operation.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>parameters</tt> : An array of objects containing <tt>name</tt> and <tt>value</tt> properties to pass as parameters to the record operation.</li>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            recordOperationPerform: function (recordOperationId, recordId, options) {\n                var url,\n                    sb,\n                    data;\n\n                if (options && (options.parameters || options.recordIds)) {\n                    data = {};\n\n                    if (options.parameters) {\n                        data.values = options.parameters;\n                    }\n\n                    if (options.recordIds) {\n                        data.recordIds = options.recordIds;\n                    }\n                }\n\n                sb = [buildSvcBaseUrl(this, \"recordOperationPerform\")];\n\n                pushIf(sb, \"recordOperationId\", recordOperationId);\n                pushIf(sb, \"recordId\", recordId);\n\n                url = sb.join(\"\");\n\n                return doPost(this, url, data, options);\n            },\n\n            searchListGetOutputDefinition: function (searchListId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"searchListGetOutputDefinition\") +\n                    \"&searchListId=\" +\n                    euc(searchListId);\n\n                return doGet(this, url, options);\n            },\n\n            searchListQuickFind: function (searchListId, criteria, options) {\n                var url;\n\n                url = buildSearchListSvcBaseUrl(this, searchListId, criteria);\n\n                if (options) {\n                    if (options.onlyReturnRows) {\n                        url += \"&onlyReturnRows=true\";\n                    }\n                    if (options.maxRecords) {\n                        url += \"&maxRecords=\" + euc(options.maxRecords);\n                    }\n                }\n\n                return doGet(this, url, options);\n            },\n\n            codeTableEntrySave: function (codeTableName, codeTableEntryId, request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"codeTableEntrySave\") +\n                    \"&codeTableName=\" +\n                    euc(codeTableName) +\n                    \"&codeTableEntryId=\" +\n                    euc(codeTableEntryId);\n\n                return doPost(this, url, request, options);\n            },\n\n            kpiDashboardGetDefinition: function (options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"kpiDashboardGetDefinition\");\n\n                if (options.returnValues) {\n                    url += \"&returnValues=true\";\n                }\n\n                return doGet(this, url, options);\n            },\n\n            queryViewGetFieldFindResults: function (request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"queryViewGetFieldFindResults\");\n\n                return doPost(this, url, request, options);\n            },\n\n            queryViewGetTree: function (id, options, forExport, forReportModelGenerator) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"queryViewGetTree\") +\n                    \"&id=\" +\n                    euc(id);\n\n                if (BBUI.is(forExport) && forExport === true) {\n                    url += \"&loadExportDefinitionViews=true\";\n                } else {\n                    url += \"&loadExportDefinitionViews=false\";\n                }\n\n                if (BBUI.is(forReportModelGenerator) && forReportModelGenerator === true) {\n                    url += \"&reportModelViewsOnly=true\";\n                } else {\n                    url += \"&reportModelViewsOnly=false\";\n                }\n\n                return doGet(this, url, options);\n            },\n\n            queryViewGetMetaData: function (id, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"queryViewGetMetaData\") +\n                    \"&id=\" +\n                    euc(id);\n\n                return doGet(this, url, options);\n            },\n\n            queryViewGetTreeNodeFields: function (node, options, forReportModelGenerator) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"queryViewGetTreeNodeFields\") +\n                    \"&node=\" +\n                    euc(node);\n\n                if (BBUI.is(forReportModelGenerator) && forReportModelGenerator === true) {\n                    url += \"&reportModelViewsOnly=true\";\n                } else {\n                    url += \"&reportModelViewsOnly=false\";\n                }\n\n                return doGet(this, url, options);\n            },\n\n            buildQueryViewGetTreeNodeChildrenUrl: function (queryViewId, forExport, forReportModelGenerator) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"queryViewGetTreeNodeChildren\");\n\n                if (BBUI.is(forExport) && forExport === true) {\n                    url += \"&loadExportDefinitionViews=true\";\n                } else {\n                    url += \"&loadExportDefinitionViews=false\";\n                }\n\n                if (BBUI.is(forReportModelGenerator) && forReportModelGenerator === true) {\n                    url += \"&reportModelViewsOnly=true\";\n                } else {\n                    url += \"&reportModelViewsOnly=false\";\n                }\n\n                return url;\n            },\n\n            adHocQueryProcess: function (request, options) {\n                var cancelCallback,\n                    requestObj,\n                    scope,\n                    state,\n                    svc,\n                    url;\n\n                function cancelAdHocQueryProcess() {\n                }\n\n                svc = this;\n\n                url = buildAdHocQuerySvcBaseUrl(svc);\n\n                if (options) {\n                    if (options.returnFormattedValues) {\n                        url += \"&returnFormattedValues=true\";\n                    }\n                    if (options.cancelId) { \n                        url += \"&cancelId=\" + options.cancelId;\n                    }\n                }\n\n                return doPost(svc, url, request, options);\n            },\n\n            adHocQueryGetResults: function (request, options) {\n                var url;\n\n                url = buildAdHocQuerySvcBaseUrl(this);\n\n                if (options) {\n                    if (options.returnFormattedValues) {\n                        url += \"&returnFormattedValues=true\" + \"&getResults=true\";\n                    }\n                    if (options.cancelId) { \n                        url += \"&cancelId=\" + euc(options.cancelId);\n                    }\n                }\n\n                return doPost(this, url, request, options);\n            },\n\n            cancelAsyncOperation: function (cancelId, options) {\n                var url;\n\n                url = buildBaseUrl(this, \"WebShellCancelAsyncOperation.ashx\") +\n                    \"&cancelId=\" +\n                    euc(cancelId);\n\n                return doGet(this, url, options);\n            },\n\n            buildAdHocQueryExportUrl: function (options) {\n                var url;\n\n                options = options || {};\n\n                url = [];\n                url.push(buildAdHocQuerySvcBaseUrl(this));\n                url.push(\"&forExport=true\");\n\n                pushIf(url, \"getResults\", \"true\", !!options.getResults);\n                pushIf(url, \"queryViewId\", options.queryViewId);\n\n                return url.join(\"\");\n            },\n\n            buildListBuilderExportUrl: function (options) {\n                var url;\n\n                options = options || {};\n\n                url = [];\n                url.push(buildBaseUrl(this, \"WebShellListBuilderService.ashx\"));\n                url.push(\"&forExport=true\");\n\n                pushIf(url, \"queryViewId\", options.queryViewId);\n                pushIf(url, \"suppressPrimaryKeyField\", \"true\", !!options.suppressPrimaryKeyField);\n                pushIf(url, \"searchText\", options.searchText);\n                pushIf(url, \"parameterFormSessionId\", options.parameterFormSessionId);\n\n                return url.join(\"\");\n            },\n\n            buildAdHocQueryListExportUrl: function (options) {\n                var url;\n\n                options = options || {};\n\n                url = [];\n                url.push(buildBaseUrl(this, \"WebShellAdHocQueryListService.ashx\"));\n                url.push(\"&forExport=true\");\n\n                pushIf(url, \"adHocQueryId\", options.adHocQueryId);\n                pushIf(url, \"queryViewId\", options.queryViewId);\n                pushIf(url, \"suppressPrimaryKeyField\", \"true\", !!options.suppressPrimaryKeyField);\n                pushIf(url, \"searchText\", options.searchText);\n                pushIf(url, \"parameterFormSessionId\", options.parameterFormSessionId);\n\n                return url.join(\"\");\n            },\n\n            adHocQuerySave: function (request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"adHocQuerySave\");\n\n                return doPost(this, url, request, options);\n            },\n\n            adHocQuerySaveDataList: function (request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"adHocQuerySaveDataList\");\n\n                return doPost(this, url, request, options);\n            },\n\n            adHocQuerySaveReport: function (request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"adHocQuerySaveReport\");\n\n                return doPost(this, url, request, options);\n            },\n\n            adHocQuerySaveSmartQuery: function (request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"adHocQuerySaveSmartQuery\");\n\n                return doPost(this, url, request, options);\n            },\n            adHocQueryGetDefinition: function (id, options) {\n                var definitionType = options.definitionType,\n                    throwOnInvalidFields = options.throwOnInvalidFields,\n                    url;\n\n                url = buildSvcBaseUrl(this, \"adHocQueryGetDefinition\") +\n                    \"&id=\" +\n                    euc(id);\n\n                if (!BBUI.is(definitionType)) {\n                    definitionType = 0; //ad-hoc query\n                }\n\n                url += \"&definitionType=\" + euc(definitionType);\n\n                if (BBUI.is(throwOnInvalidFields)) {\n                    url += \"&throwOnInvalidFields=\" + euc(throwOnInvalidFields);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            adHocQueryDelete: function (id, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"adHocQueryDelete\") +\n                    \"&id=\" +\n                    euc(id);\n\n                return doPost(this, url, null, options);\n            },\n\n            exportDefinitionSave: function (request, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"exportDefinitionSave\");\n\n                return doPost(this, url, request, options);\n            },\n\n            exportDefinitionGetDefinition: function (id, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"exportDefinitionGetDefinition\") +\n                    \"&id=\" +\n                    euc(id);\n\n                return doGet(this, url, options);\n            },\n\n            smartQueryProcess: function (request, options) {\n                var cancelCallback,\n                    requestObj,\n                    scope,\n                    state,\n                    svc,\n                    url;\n\n                function cancelSmartQueryProcess() {\n                }\n\n                svc = this;\n\n                url = buildBaseUrl(svc, \"WebShellSmartQueryService.ashx\");\n\n                if (options) {\n                    if (options.returnFormattedValues) { \n                        url += \"&returnFormattedValues=true\";\n                    }\n                    if (options.cancelId) { \n                        url += \"&cancelId=\" + euc(options.cancelId);\n                    }\n                }\n\n                return doPost(svc, url, request, options);\n            },\n\n            smartQueryGetResults: function (request, options) {\n                var url;\n\n                url = buildBaseUrl(this, \"WebShellSmartQueryService.ashx\");\n\n                if (options) {\n                    if (options.returnFormattedValues) { \n                        url += \"&returnFormattedValues=true\" + \"&getResults=true\";\n                    }\n                    if (options.cancelId) { \n                        url += \"&cancelId=\" + euc(options.cancelId);\n                    }\n                }\n\n                return doPost(this, url, request, options);\n            },\n\n            buildSmartQueryExportUrl: function (options) {\n                var url;\n\n                url = [];\n                url.push(buildBaseUrl(this, \"WebShellSmartQueryService.ashx\"));\n                url.push(\"&forExport=true\");\n\n                if (options && options.getResults) {\n                    url.push(\"&getResults=true\");\n                }\n\n                return url.join(\"\");\n            },\n\n            userGetFunctionalAreaHistory: function (functionalAreaId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userGetFunctionalAreaHistory\") +\n                    \"&functionalAreaId=\" +\n                    euc(functionalAreaId);\n\n                if (options) {\n                    if (options.folderPath) {\n                        url += \"&folderPath=\" +\n                            euc(options.folderPath);\n                    }\n\n                    if (options.includeSearchTasks) {\n                        url += \"&includeSearchTasks=true\";\n                    }\n\n                    if (options.includeShortcuts) {\n                        url += \"&includeShortcuts=true\";\n                    }\n\n                    if (!options.skipMru) {\n                        url += \"&includeMru=true\";\n                    }\n                }\n\n                return doGet(this, url, options);\n            },\n\n            userUpdateDataFormSettings: function (formSessionId, userSettingsPath, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdateDataFormSettings\") +\n                    \"&formSessionId=\" +\n                    euc(formSessionId) +\n                    \"&userSettingsPath=\" +\n                    euc(userSettingsPath);\n\n                return doPost(this, url, null, options);\n            },\n\n            userUpdateSelectedPervasiveSearchTask: function (pervasiveSearchTaskId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdateSelectedPervasiveSearchTask\");\n\n                if (pervasiveSearchTaskId) {\n                    url += \"&pervasiveSearchTaskId=\" + euc(pervasiveSearchTaskId);\n                }\n\n                return doPost(this, url, null, options);\n            },\n\n            userUpdateShortcuts: function (request, options) {\n                var url;\n\n                options = options || {};\n\n                url = buildSvcBaseUrl(this, \"userUpdateShortcuts\");\n\n                if (options.remove) {\n                    url += \"&remove=\" + euc(options.remove);\n                }\n\n                if (options.replace) {\n                    url += \"&replace=\" + euc(options.replace);\n                }\n\n                return doPost(this, url, request, options);\n            },\n\n            userUpdatePageActionGroupSettings: function (pageId, actionGroups, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdatePageActionGroupSettings\") +\n                    \"&pageId=\" +\n                    euc(pageId);\n\n                return doPost(this, url, actionGroups, options);\n            },\n\n            userUpdateFunctionalAreaActionGroupSettings: function (functionalAreaId, actionGroups, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdateFunctionalAreaActionGroupSettings\") +\n                    \"&functionalAreaId=\" +\n                    euc(functionalAreaId);\n\n                return doPost(this, url, actionGroups, options);\n            },\n\n            userUpdatePageDataListSettings: function (pageId, sectionId, dataListId, settings, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdatePageDataListSettings\", pageId, null, sectionId) +\n                    \"&dataListId=\" +\n                    euc(dataListId);\n\n                return doPost(this, url, settings, options);\n            },\n\n            userUpdatePageListBuilderSettings: function (queryViewId, userSettingsPath, settings, options) {\n                var url;\n\n                options = options || {};\n\n                url = buildSvcBaseUrl(this, \"userUpdatePageListBuilderSettings\") +\n                    \"&queryViewId=\" +\n                    euc(queryViewId) +\n                    \"&userSettingsPath=\" +\n                    euc(userSettingsPath);\n\n                if (options.storeSettingsByContextRecordId) {\n                    url += \"&storeSettingsByContextRecordId=true\";\n\n                    if (options.contextRecordId) {\n                        url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                    }\n                }\n\n                return doPost(this, url, settings, options);\n            },\n\n            userUpdateAdHocQueryListBuilderSettings: function (queryViewId, adHocQueryId, userSettingsPath, settings, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdatePageListBuilderSettings\") +\n                    \"&queryViewId=\" +\n                    euc(queryViewId) +\n                    \"&adHocQueryId=\" +\n                    euc(adHocQueryId) +\n                    \"&userSettingsPath=\" +\n                    euc(userSettingsPath);\n\n                return doPost(this, url, settings, options);\n            },\n\n            userUpdatePageSectionSettings: function (pageId, sections, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdatePageSectionSettings\") +\n                    \"&pageId=\" +\n                    euc(pageId);\n\n                return doPost(this, url, sections, options);\n            },\n\n            userUpdatePageTabSettings: function (pageId, tabs, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdatePageTabSettings\") +\n                    \"&pageId=\" +\n                    euc(pageId);\n\n                return doPost(this, url, tabs, options);\n            },\n\n            userSetFeatureTipSeen: function (featureTipId, tipSeen, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userSetFeatureTipSeen\");\n\n                return doPost(this, url, {featureTipId: featureTipId, tipSeen: tipSeen}, options);\n            },\n\n            userGetFeatureTipSeen: function (featureTipId, setTipAsSeen, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userGetFeatureTipSeen\");\n\n                return doPost(this, url, {featureTipId: featureTipId, setTipAsSeen: setTipAsSeen}, options);\n            },\n\n            userUpdateSearchListGridSettings: function (searchlistid, gridSettings, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdateSearchListGridSettings\") +\n                    \"&searchlistid=\" +\n                    euc(searchlistid);\n\n                return doPost(this, url, gridSettings, options);\n            },\n\n            userGetSearchListGridSettings: function (searchlistid, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userGetSearchListGridSettings\") +\n                    \"&searchlistid=\" +\n                    euc(searchlistid);\n\n                return doGet(this, url, options);\n            },\n\n            userUpdateActionPanelSettings: function (settings, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"userUpdateActionPanelSettings\");\n\n                return doPost(this, url, settings, options);\n            },\n\n            featureSearch: function (criteria, onlyRssFeeds, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"featureSearch\") +\n                    \"&criteria=\" +\n                    euc(criteria);\n\n                if (onlyRssFeeds) {\n                    url += \"&onlyRssFeeds=true\";\n                }\n\n                return doGet(this, url, options);\n            },\n\n            buildRssFeedUrl: function (dataListId, contextRecordId) {\n                var url;\n\n                url = BBUI.urlConcat(this.baseUrl, \"rssfeed.ashx?WebShell=true&DBName=\" +\n                    euc(this.databaseName) +\n                    \"&DataListID=\" +\n                    euc(dataListId));\n\n                if (contextRecordId) {\n                    url += \"&ContextRecordID=\" + contextRecordId;\n                }\n\n                return url;\n            },\n\n            /**\n             * Loads a data form from the server and passes the {@link BBUI.webshell.servicecontracts.DataFormLoadReply reply object} to the successCallback function.\n             * @param {String} dataFormInstanceId The ID of the data form instance to load.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>recordId</tt> : The ID of the record for the data form.</li>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            dataFormLoad: function (dataFormInstanceId, options) {\n                var svc,\n                    url;\n\n                options = options || {};\n\n                url = buildSvcBaseUrl(this, \"dataFormLoad\") +\n                    \"&dataFormInstanceId=\" +\n                    euc(dataFormInstanceId);\n\n                if (options.recordId) {\n                    url += \"&recordId=\" + euc(options.recordId);\n                }\n\n                if (options.contextRecordId) {\n                    url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                }\n\n                url = addSecurityContext(url, options);\n\n                return doGet(this, url, options);\n            },\n\n            /**\n             * Saves a data form on the server and passes the {@link BBUI.webshell.servicecontracts.DataFormSaveReply reply object} to the successCallback function.\n             * @param {String} dataFormInstanceId The ID of the data form instance to load.\n             * @param {Function} successCallback (optional) See class description for more information.\n             * @param {Function} failureCallback (optional) See class description for more information.\n             * @param {Object} options (optional) An object that my contain any of the following properties:\n             * <ul>\n             * <li><tt>contextRecordId</tt> : The ID of the record that provides context for the data form.</li>\n             * <li><tt>recordId</tt> : The ID of the record for the data form.</li>\n             * <li><tt>scope</tt> : See class description for more information.</li>\n             * </ul>\n             */\n            dataFormSave: function (dataFormInstanceId, options) {\n                var svc,\n                    url,\n                    data;\n\n                options = options || {};\n\n                data = {};\n\n                url = buildSvcBaseUrl(this, \"dataFormSave\") +\n                    \"&dataFormInstanceId=\" +\n                    euc(dataFormInstanceId);\n\n                if (options.recordId) {\n                    url += \"&recordId=\" + euc(options.recordId);\n                }\n\n                if (options.contextRecordId) {\n                    url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                }\n\n                url = addSecurityContext(url, options);\n\n                if (options.values) {\n                    data.values = options.values;\n                }\n\n                return doPost(this, url, data, options);\n            },\n\n            taskWizardGetDefinition: function (taskWizardId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"taskwizardgetdefinition\") +\n                    \"&taskWizardId=\" +\n                    euc(taskWizardId);\n\n                return doGet(this, url, options);\n            },\n\n            taskWizardGetTaskStatus: function (taskId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"taskwizardgettaskstatus\") +\n                    \"&taskId=\" +\n                    euc(taskId);\n\n                return doGet(this, url, options);\n            },\n\n            buildReportExportUrl: function (reportId, historyId, exportType, deviceInfo, dataFormItemKey, fileName) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"exportReport\") +\n                    \"&reportId=\" + euc(reportId);\n\n                if (historyId) {\n                    url += \"&historyId=\" + euc(historyId);\n                }\n\n                if (!BBUI.is(exportType)) {\n                    exportType = 2;\n                }\n\n                url += \"&exportType=\" + euc(exportType);\n\n                if (deviceInfo) {\n                    url += \"&deviceInfo=\" + euc(deviceInfo);\n                }\n\n                if (dataFormItemKey) {\n                    url += \"&dataFormItemKey=\" + euc(dataFormItemKey);\n                }\n\n                if (fileName) {\n                    url += \"&fileName=\" + euc(fileName);\n                }\n\n                return url;\n            },\n\n            cacheDataFormItem: function (values, options) {\n                var url,\n                    data;\n\n                if (values) {\n                    data = {\n                        values: values\n                    };\n                }\n\n                url = buildSvcBaseUrl(this, \"cacheDataFormItem\");\n\n                return doPost(this, url, data, options);\n            },\n\n            idMap: function (idMapperId, sourceId, options) {\n                var url,\n                    data;\n\n                url = buildSvcBaseUrl(this, \"idMap\") +\n                    \"&idMapperId=\" + euc(idMapperId);\n\n                if (sourceId) {\n                    url += \"&sourceId=\" + euc(sourceId);\n                }\n\n                return doGet(this, url, options);\n            },\n\n            securityUserGrantedFeature: function (id, featureType, options) {\n                var url,\n                    data;\n\n                url = buildSvcBaseUrl(this, \"securityUserGrantedFeature\") +\n                    \"&id=\" + euc(id) +\n                    \"&featureType=\" + euc(featureType);\n\n                return doGet(this, url, options);\n            },\n\n            loadCatalogItem: function (sourceType, sourceName, itemResourceName, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"loadCatalogItem\") +\n                    \"&sourceType=\" + euc(sourceType) +\n                    \"&sourceName=\" + euc(sourceName) + \n                    \"&itemResourceName=\" + euc(itemResourceName);\n\n                return doPost(this, url, null, options);\n            },\n\n            getPageHelpKey: function (pageId, tabId, sectionId, recordId, options) {\n                var url;\n\n                url = buildSvcBaseUrl(this, \"getPageHelpkey\", pageId, tabId, sectionId, null, recordId);\n\n                return doGet(this, url, options);\n            },\n\n            buildSvcBaseUrl: function (action) {\n                return buildSvcBaseUrl(this, action);\n            },\n\n            doGet: function (url, options) {\n                return doRequest(this, \"GET\", url, null, options);\n            },\n\n            doPost: function (url, data, options) {\n                return doRequest(this, \"POST\", url, data, options);\n            }\n        };\n\n    }());\n\n    \n    angular.module('bbui.shellservice', [])\n        .constant('bbuiShellServiceConfig', {\n            baseUrl: null,\n            databaseName: null\n        })\n        .factory('bbuiShellService', ['$http', 'bbuiShellServiceConfig', function ($http, bbuiShellServiceConfig) {\n            return {\n                create: function (baseUrl, databaseName, options) {\n                    var svc;\n                    \n                    baseUrl = baseUrl || bbuiShellServiceConfig.baseUrl;\n                    databaseName = databaseName || bbuiShellServiceConfig.databaseName;\n                    \n                    if (baseUrl === null || !databaseName) {\n                        throw new Error('You must either provide a baseUrl and databaseName as parameters or set them globally using bbuiShellServiceConfig.');\n                    }\n                    \n                    svc = new Service(baseUrl, databaseName, options);\n                    svc.$http = $http;\n                    \n                    return svc;\n                }\n            };\n        }]);\n}());"
  ]
}